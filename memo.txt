1. 실행방법 설치 후 터미널 열어서 node 파일명 적어주면 터미널에서 확인 가능
https://nodejs.org/en

npm이란?
노드 패키지 매니저임 

처음부터 끝까지 짠다?? 도른놈임

터미널에서 npm install 모듈이름 적어주면 설치가 됨

npm 사용전에 정리하는방법

npm init - 을 먼저 입력해주고 하면 좋음 / 깔끔한 관리를 위해 사용할수 있음
이거하고 계속 엔터를 누르면 package.json(내용 대략적 확인하기위함)이 생성됨

*** 쉬운예제로 해보기~~!
(https://www.npmjs.com/package/figlet) 을 쓸거임
npm install figlet 을 눌러줌
npm install figlet === 이것만 하면 여기 폴더에서만 사용가능함
    - npm install figlet -g === 라고하면 모든곳에가도 설치가 됨
    - g로 전역에서 사용하면 오류날 가능성이 높기 때문에 안해주는게 좋음
    완료하면 package-lock.json(내용을 상세하기 확인하기 위함)이 생성됨

*** 피글렛 지우는법
    npm uninstall figlet 
    을 입력해주면 삭제가 됨
    삭제하고 다시 node index.js를 실행하면 
    'MODULE_NOT_FOUND' 라는 오류가 뜨는걸 볼수있음!

왜냐! var figlet = require("figlet"); 
    리콰이얼 했는데 피글렛이 없어졌으니까~~ 실행 안되는거임\



====================================================
express 사용방법!!
https://www.npmjs.com/package/express


(express === 노드js를 활용해서 웹프레임워크를 만드는것)

적혀있는데로 install에 있는
npm i express 를 입력하고 설치를하면 패키지.json에 다운된걸 볼수있음

express예제 먼저 실행시켜보기
예제 넣고 실행해보면 터미널이 멈춰있는데 실행된거임
http://localhost:3000/에 들어가보면 예제에 적혀있는것처럼 hello world 가 나옴

express홈페이지 예제에 있는걸로 하나하나 알아보기
https://expressjs.com/ko/starter/hello-world.html

app.listen 을 이해하려면 포트를 알아야함

포트port - 특정 포트(위치? 주소같은걸로 들어가는거임)

포트마다 정해진 규격이 있음!!!!!!
https://ko.wikipedia.org/wiki/TCP/UDP%EC%9D%98_%ED%8F%AC%ED%8A%B8_%EB%AA%A9%EB%A1%9D
여기 참고하기
    이해하기쉽게 ip는 대표전화번호고 서비스 포트는 ars 내선번호들(상담원연결0번) 이런걸 생각해보면됨

포트마다 다른 프로그램을 실행할수있음

한서버내에서 여러개 사용 가능함
localhost가 뭐냐 내 컴퓨터에서 아이피주소 안적고 들어갈수있게해주는거

===
*** app.get('/', (req, res)=>{}) === http.메소드('라우팅', 콜백함수) 라고 생각하면됨
http메소드 목적, 종류를 알려주기위해 사용하는 수단
    - get - 주소창(주소창에서 데이터를 전달)
    - post - 주소창 x(주소창이 아닌 내부적으로 body안에서 데이터를 전달)
    // req = 요청 , res = 응답 임

라우팅 - 주소/폴더이름/파일이름 등등 이렇게 가는걸 라우팅 이라고함

콜백함수 - 지금 함수 끝나고 실행할 함수
    예시
        1000ms 뒤에 함수를 실행해라
        setTimeout(()=> {console.log('1초 지남')}, 1000);

이게 주소로 들어가니까 get 함수가 실행되고 포트로 들어가니까 listen 함수가 실행되는건가요?? - Listen 함수는 항상 실행이 됨

리슨 - 항상 하고있음 - 서버가 켜져있다고 생각하면됨
겟 - 달라질수있음
    예제
        get / dog => {'sound': '멍멍'}
        get / cat => {'sound': '야옹'}
        으로해보기 
        
        1.일단 제이슨 데이터 없이 해보기
        app.get('/', (req, res) => {
            res.send('Hello World!')
        }) // 기본주소

        app.get('/dog', (req, res) => {
            res.send('강아지')
        }) //기본주소/dog  <h1>강아지</h1> html태그드를 사용하면됨

        app.get('/cat', (req, res) => {
            res.send('고양이')
        }) //기본주소/cat




        axios와 express 차이 
        axios와 쏴서 돌아오는 공격
        express 받은거 돌려주는
        
        엑시오스로 요청에서 익스프레스로 응답하기

        2. json 오브젝트로 다시 보내주기
        주소창에 한글 들어가려면 인코딩을 해야함 인코딩 변환 사이트 사용해야함

        app.get('/dog', (req, res) => {
            res.json({'sound' : '멍멍'}) // send 와 같지만이게 더 명시적으로 사용가능함
        })

        app.get('/cat', (req, res) => {
            res.json({'sound': '야옹'})
        })

        3.변수로 줄수있나연??

        req 요청이 들어옴
        res 요청을 받아서 처리하고 내보내는것

        get - 파라미터와 쿼리를 사용할수있음

        *** 파라미터로 사용하기~!
        // 변수로 받기 가능 user뒤에 id를 받을때 :콜론이 필요함+파라미터 이름
        app.get('/user/:id', (req, res) => {
            const q = req.params; //파람스 = 요청 들어온것중에 콜론쓰고 값을써준값이 들어온다고 생각하면됨 
            console.log(q)

            res.json({'userid' : q.id}) // 이게 더 명시적으로 사용가능함
        })

        이렇게 적고 터미널에 실행시킨후
        localhost:3000/user/yoolog 를 검색해보면 터미널에 yoolog가 찍히는걸 볼수있음
        또 페이지에도 userid: 넣어준id 가 나오는걸 확인할수있음
  
        *** 쿼리로 사용하기

        http://localhost:3000/user/asdf?q=yoolog&name=ah&age=30
        app.get('/user/:id', (req, res) => {

            const q = req.query; //쿼리로 사용하기
            console.log(q);

            res.json({'userid' : q.id}) // 이게 더 명시적으로 사용가능함
        })
        실행시키면 { q: 'yoolog', name: 'ah', age: '30' } 라고 터미널에 찍힘


        아래처럼 넣어서 다시 실행시켜주면
        app.get('/user/:id', (req, res) => {

            const q = req.query; //쿼리로 사용하기
            console.log(q.q);
            console.log(q.name);
            console.log(q.age);

            res.json({'userid' : q.name}) // 이게 더 명시적으로 사용가능함
        })
        {"userid":"ah"} 가 페이지에 찍히고
        yoolog
        ah
        30 라고 터미널에 찍히는걸 볼수있음~~


        !!!!post로 사용한다면?!!
        app.post('/user/:id', (req, res) => {
            const p = req.params; //파라미터 사용 여기까지는 같음
            console.log(p);
            const b = req.body; //바디에 값을 적용시켜줘야함
            console.log(b);

            res.send({'message' : 'hello world'}) 
        })


===================== 동물소리 api 서버 만들기 =======================
GET / sound / :name
name 따라서 다른 울음소리

app.get('/sound/:name', (req, res) => {
    // const p = req.params; 간편하게 하는법
    const { name } = req.params; //name에 바로 들어감

    if(name == 'dog'){
        res.json({'sound': '멍멍'})
    }else if(name == 'cat'){
        res.json({'sound': '야옹'})
    }else if(name == 'pig'){
        res.json({'sound': '꿀꿀'})
    }else {
        res.json({'sound': '알수없음'})
    }
    
    http://localhost:3000/sound/name값 넣어준거 검색하면 잘 뜨게됨!!!!
    이게 백엔드의 모든것이라고 할수있다했음ㅋㅎㅋㅎ

API 서버 완성 완료~~~~

*****cors 이슈!!!!
html 파일에서 어떤서버로 요청했을때 보안상 이상한데서 요청이 올수있기때문에
기본적으로 막는다 html로 요청할때 cors가 없으면 차단되는 경우도 있음!!

cors 역할!! - html의 요청의 응답이 잘되도록 해주는것

처리해주기
1. 모듈설치
https://www.npmjs.com/package/cors

2. 파일에 넣어주기
js 파일에
const cors = require('cors')
app.use(cors())

만 넣어주면 사용가능!

cors html 작성하고 실행한거 참고하기!!1

만약 port 에러가나면
그냥 다른번호 지정해서 봐도 됨 
8080 1234 등등

    }else if(name == 'cat')
        res.json({'sound': '야옹', 'img': 'img주소 넣기'})
        이러면 이미지도 나올수있는 api가 될수있음!!